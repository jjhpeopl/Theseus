syntax = "proto3";

package ai.eloquent.raft;

option java_package = "ai.eloquent.raft";
option java_outer_classname = "KeyValueStateMachineProto";

//
// This is the main parent state
//

message KVStateMachine {
  /** @Deprecated */
  map<string, ValueWithOptionalOwner> values = 1;
  /** @Deprecated */
  map<string, QueueLock> locks = 2;

  repeated string valuesKeys = 3;
  repeated ValueWithOptionalOwner valuesValues = 4;
  repeated string locksKeys = 5;
  repeated QueueLock locksValues = 6;
}

//
// This is a value with an optional owner, so that the value can be automatically cleaned up on the owner's
// disconnection from the cluster.
//

message ValueWithOptionalOwner {
  bytes value = 1;
  string owner = 2; // if this is not empty, the value will be cleaned up automatically when the owner disconnects
  uint64 last_accessed = 3;
  uint64 created_at = 4;
}

//
// This is how Queue Locks are serialized
//
// A queue lock is a simple fair lock, which has a single holder and a queue of people waiting on the lock. In the event
// of a current holder of the lock disconnecting, the next waiting on the lock is automatically granted the lock.
//

message QueueLock {
  LockRequest holder = 1;
  repeated LockRequest waiting = 2;
}

message LockRequest {
  string server = 1;
  string uniqueHash = 2;
}

//
// Transition is the transport package for all transitions on the StateMachine. Only one of the entries other than type
// is non-null.
//

message Transition {
  TransitionType type = 1;
  oneof body {
    RequestLock requestLock = 2;
    TryLock tryLock = 3;
    ReleaseLock releaseLock = 4;
    SetValue setValue = 5;
    RemoveValue removeValue = 6;
    ClearTransients clearTransients = 7;
  }
  repeated Transition transitions = 8;
}

enum TransitionType {
  INVALID = 0;
  REQUEST_LOCK = 6;  // was 0, before INVALID was added
  RELEASE_LOCK = 1;
  TRY_LOCK = 2;
  SET_VALUE = 3;
  REMOVE_VALUE = 4;
  CLEAR_TRANSIENTS = 5;
  TRANSITION_GROUP = 7;
}

//
// RequestLock is a transition on the StateMachine
//
// 1. If the QueueLock is not currently in the locks map in StateMachine (means it is currently not held), then the
//    requester gets it immediately.
// 2. Otherwise, add the requester to the waiting list of the QueueLock
//

message RequestLock {
  string lock = 1;
  string requester = 2;
  string uniqueHash = 3; // This is used to prevent multiple people from taking the same lock on the same box
}

//
// TryLock is a transition on the StateMachine
//
// 1. If the QueueLock is not currently in the locks map in StateMachine (means it is currently not held), then the
//    requester gets it immediately.
// 2. Otherwise, this request disappears
//

message TryLock {
  string lock = 1;
  string requester = 2;
  string uniqueHash = 3; // This is used to prevent multiple people from taking the same lock on the same box
}

//
// ReleaseLock is a transition on the StateMachine
//
// 1. If the QueueLock is held by a different requester, this is a no-op
// 2. If the QueueLock waiting list is non-empty, then the next in the waiting list gets the lock immediately, and is
//    removed from the waiting list.
// 3. Otherwise, remove the lock from the locks map in StateMachine
//

message ReleaseLock {
  string lock = 1;
  string requester = 2;
  string uniqueHash = 3; // This is used to prevent multiple people from taking the same lock on the same box
}

//
// SetValue is a transition on the StateMachine
//
// 1. Set key to value in the values map
//

message SetValue {
  string key = 1;
  bytes value = 2;
  string owner = 3; // if this is not empty, the value will be cleaned up automatically when the owner disconnects
}

//
// RemoveValue is a transition on the StateMachine
//
// 1. Remove the key from the values map
//

message RemoveValue {
  string key = 1;
}

//
// ClearTransients is a transition on the StateMachine
//
// 1. Remove the key from the values map
//

message ClearTransients {
  string owner = 1;
}
