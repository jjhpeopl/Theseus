/*
 * This file is generated by jOOQ.
*/
package ai.eloquent.sql.common.tables;


import ai.eloquent.sql.common.Common;
import ai.eloquent.sql.common.Indexes;
import ai.eloquent.sql.common.Keys;
import ai.eloquent.sql.common.tables.records.TimingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Timing extends TableImpl<TimingRecord> {

    private static final long serialVersionUID = -1464988554;

    /**
     * The reference instance of <code>common.timing</code>
     */
    public static final Timing TIMING = new Timing();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TimingRecord> getRecordType() {
        return TimingRecord.class;
    }

    /**
     * The column <code>common.timing.id</code>.
     */
    public final TableField<TimingRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>common.timing.key</code>.
     */
    public final TableField<TimingRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.VARCHAR(127).nullable(false), this, "");

    /**
     * The column <code>common.timing.host</code>.
     */
    public final TableField<TimingRecord, String> HOST = createField("host", org.jooq.impl.SQLDataType.VARCHAR(127).nullable(false), this, "");

    /**
     * The column <code>common.timing.begin_time</code>.
     */
    public final TableField<TimingRecord, LocalDateTime> BEGIN_TIME = createField("begin_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>common.timing.end_time</code>.
     */
    public final TableField<TimingRecord, LocalDateTime> END_TIME = createField("end_time", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>common.timing.total</code>.
     */
    public final TableField<TimingRecord, Long> TOTAL = createField("total", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>common.timing.mean</code>.
     */
    public final TableField<TimingRecord, Double> MEAN = createField("mean", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>common.timing.variance</code>.
     */
    public final TableField<TimingRecord, Double> VARIANCE = createField("variance", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>common.timing.min</code>.
     */
    public final TableField<TimingRecord, Double> MIN = createField("min", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>common.timing.max</code>.
     */
    public final TableField<TimingRecord, Double> MAX = createField("max", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * Create a <code>common.timing</code> table reference
     */
    public Timing() {
        this(DSL.name("timing"), null);
    }

    /**
     * Create an aliased <code>common.timing</code> table reference
     */
    public Timing(String alias) {
        this(DSL.name(alias), TIMING);
    }

    /**
     * Create an aliased <code>common.timing</code> table reference
     */
    public Timing(Name alias) {
        this(alias, TIMING);
    }

    private Timing(Name alias, Table<TimingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Timing(Name alias, Table<TimingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Common.COMMON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TIMING_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TimingRecord, Long> getIdentity() {
        return Keys.IDENTITY_TIMING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TimingRecord> getPrimaryKey() {
        return Keys.KEY_TIMING_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TimingRecord>> getKeys() {
        return Arrays.<UniqueKey<TimingRecord>>asList(Keys.KEY_TIMING_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timing as(String alias) {
        return new Timing(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timing as(Name alias) {
        return new Timing(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Timing rename(String name) {
        return new Timing(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Timing rename(Name name) {
        return new Timing(name, null);
    }
}
