/*
 * This file is generated by jOOQ.
*/
package ai.eloquent.sql.common.tables.records;


import ai.eloquent.sql.common.tables.Timing;

import java.time.LocalDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TimingRecord extends UpdatableRecordImpl<TimingRecord> implements Record10<Long, String, String, LocalDateTime, LocalDateTime, Long, Double, Double, Double, Double> {

    private static final long serialVersionUID = -1903670702;

    /**
     * Setter for <code>common.timing.id</code>.
     */
    public TimingRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>common.timing.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>common.timing.key</code>.
     */
    public TimingRecord setKey(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>common.timing.key</code>.
     */
    public String getKey() {
        return (String) get(1);
    }

    /**
     * Setter for <code>common.timing.host</code>.
     */
    public TimingRecord setHost(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>common.timing.host</code>.
     */
    public String getHost() {
        return (String) get(2);
    }

    /**
     * Setter for <code>common.timing.begin_time</code>.
     */
    public TimingRecord setBeginTime(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>common.timing.begin_time</code>.
     */
    public LocalDateTime getBeginTime() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>common.timing.end_time</code>.
     */
    public TimingRecord setEndTime(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>common.timing.end_time</code>.
     */
    public LocalDateTime getEndTime() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>common.timing.total</code>.
     */
    public TimingRecord setTotal(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>common.timing.total</code>.
     */
    public Long getTotal() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>common.timing.mean</code>.
     */
    public TimingRecord setMean(Double value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>common.timing.mean</code>.
     */
    public Double getMean() {
        return (Double) get(6);
    }

    /**
     * Setter for <code>common.timing.variance</code>.
     */
    public TimingRecord setVariance(Double value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>common.timing.variance</code>.
     */
    public Double getVariance() {
        return (Double) get(7);
    }

    /**
     * Setter for <code>common.timing.min</code>.
     */
    public TimingRecord setMin(Double value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>common.timing.min</code>.
     */
    public Double getMin() {
        return (Double) get(8);
    }

    /**
     * Setter for <code>common.timing.max</code>.
     */
    public TimingRecord setMax(Double value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>common.timing.max</code>.
     */
    public Double getMax() {
        return (Double) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<Long, String, String, LocalDateTime, LocalDateTime, Long, Double, Double, Double, Double> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row10<Long, String, String, LocalDateTime, LocalDateTime, Long, Double, Double, Double, Double> valuesRow() {
        return (Row10) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return Timing.TIMING.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Timing.TIMING.KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Timing.TIMING.HOST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field4() {
        return Timing.TIMING.BEGIN_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field5() {
        return Timing.TIMING.END_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field6() {
        return Timing.TIMING.TOTAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field7() {
        return Timing.TIMING.MEAN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field8() {
        return Timing.TIMING.VARIANCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field9() {
        return Timing.TIMING.MIN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Double> field10() {
        return Timing.TIMING.MAX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getHost();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component4() {
        return getBeginTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component5() {
        return getEndTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component6() {
        return getTotal();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component7() {
        return getMean();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component8() {
        return getVariance();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component9() {
        return getMin();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double component10() {
        return getMax();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getKey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getHost();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value4() {
        return getBeginTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value5() {
        return getEndTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value6() {
        return getTotal();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value7() {
        return getMean();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value8() {
        return getVariance();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value9() {
        return getMin();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Double value10() {
        return getMax();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TimingRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TimingRecord value2(String value) {
        setKey(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TimingRecord value3(String value) {
        setHost(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TimingRecord value4(LocalDateTime value) {
        setBeginTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TimingRecord value5(LocalDateTime value) {
        setEndTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TimingRecord value6(Long value) {
        setTotal(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TimingRecord value7(Double value) {
        setMean(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TimingRecord value8(Double value) {
        setVariance(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TimingRecord value9(Double value) {
        setMin(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TimingRecord value10(Double value) {
        setMax(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TimingRecord values(Long value1, String value2, String value3, LocalDateTime value4, LocalDateTime value5, Long value6, Double value7, Double value8, Double value9, Double value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TimingRecord
     */
    public TimingRecord() {
        super(Timing.TIMING);
    }

    /**
     * Create a detached, initialised TimingRecord
     */
    public TimingRecord(Long id, String key, String host, LocalDateTime beginTime, LocalDateTime endTime, Long total, Double mean, Double variance, Double min, Double max) {
        super(Timing.TIMING);

        set(0, id);
        set(1, key);
        set(2, host);
        set(3, beginTime);
        set(4, endTime);
        set(5, total);
        set(6, mean);
        set(7, variance);
        set(8, min);
        set(9, max);
    }
}
