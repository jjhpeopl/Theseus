/*
 * This file is generated by jOOQ.
*/
package ai.eloquent.sql.common;


import ai.eloquent.sql.common.tables.CacheTestDummy;
import ai.eloquent.sql.common.tables.Credential;
import ai.eloquent.sql.common.tables.Fs;
import ai.eloquent.sql.common.tables.LatencyState;
import ai.eloquent.sql.common.tables.MturkHitTypeIds;
import ai.eloquent.sql.common.tables.Sentence;
import ai.eloquent.sql.common.tables.SqlLock;
import ai.eloquent.sql.common.tables.Timing;
import ai.eloquent.sql.common.tables.Variable;
import ai.eloquent.sql.common.tables.records.CacheTestDummyRecord;
import ai.eloquent.sql.common.tables.records.CredentialRecord;
import ai.eloquent.sql.common.tables.records.FsRecord;
import ai.eloquent.sql.common.tables.records.LatencyStateRecord;
import ai.eloquent.sql.common.tables.records.MturkHitTypeIdsRecord;
import ai.eloquent.sql.common.tables.records.SentenceRecord;
import ai.eloquent.sql.common.tables.records.SqlLockRecord;
import ai.eloquent.sql.common.tables.records.TimingRecord;
import ai.eloquent.sql.common.tables.records.VariableRecord;

import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>common</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<SentenceRecord, Long> IDENTITY_SENTENCE = Identities0.IDENTITY_SENTENCE;
    public static final Identity<TimingRecord, Long> IDENTITY_TIMING = Identities0.IDENTITY_TIMING;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CacheTestDummyRecord> KEY_CACHE_TEST_DUMMY_PRIMARY = UniqueKeys0.KEY_CACHE_TEST_DUMMY_PRIMARY;
    public static final UniqueKey<CredentialRecord> KEY_CREDENTIAL_PRIMARY = UniqueKeys0.KEY_CREDENTIAL_PRIMARY;
    public static final UniqueKey<FsRecord> KEY_FS_PRIMARY = UniqueKeys0.KEY_FS_PRIMARY;
    public static final UniqueKey<LatencyStateRecord> KEY_LATENCY_STATE_PRIMARY = UniqueKeys0.KEY_LATENCY_STATE_PRIMARY;
    public static final UniqueKey<MturkHitTypeIdsRecord> KEY_MTURK_HIT_TYPE_IDS_PRIMARY = UniqueKeys0.KEY_MTURK_HIT_TYPE_IDS_PRIMARY;
    public static final UniqueKey<MturkHitTypeIdsRecord> KEY_MTURK_HIT_TYPE_IDS_ID = UniqueKeys0.KEY_MTURK_HIT_TYPE_IDS_ID;
    public static final UniqueKey<SentenceRecord> KEY_SENTENCE_PRIMARY = UniqueKeys0.KEY_SENTENCE_PRIMARY;
    public static final UniqueKey<SqlLockRecord> KEY_SQL_LOCK_PRIMARY = UniqueKeys0.KEY_SQL_LOCK_PRIMARY;
    public static final UniqueKey<TimingRecord> KEY_TIMING_PRIMARY = UniqueKeys0.KEY_TIMING_PRIMARY;
    public static final UniqueKey<VariableRecord> KEY_VARIABLE_PRIMARY = UniqueKeys0.KEY_VARIABLE_PRIMARY;
    public static final UniqueKey<VariableRecord> KEY_VARIABLE_KEY = UniqueKeys0.KEY_VARIABLE_KEY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<SentenceRecord, Long> IDENTITY_SENTENCE = Internal.createIdentity(Sentence.SENTENCE, Sentence.SENTENCE.ID);
        public static Identity<TimingRecord, Long> IDENTITY_TIMING = Internal.createIdentity(Timing.TIMING, Timing.TIMING.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<CacheTestDummyRecord> KEY_CACHE_TEST_DUMMY_PRIMARY = Internal.createUniqueKey(CacheTestDummy.CACHE_TEST_DUMMY, "KEY_cache_test_dummy_PRIMARY", CacheTestDummy.CACHE_TEST_DUMMY.ID);
        public static final UniqueKey<CredentialRecord> KEY_CREDENTIAL_PRIMARY = Internal.createUniqueKey(Credential.CREDENTIAL, "KEY_credential_PRIMARY", Credential.CREDENTIAL.KEY);
        public static final UniqueKey<FsRecord> KEY_FS_PRIMARY = Internal.createUniqueKey(Fs.FS, "KEY_fs_PRIMARY", Fs.FS.BUCKET, Fs.FS.PATH);
        public static final UniqueKey<LatencyStateRecord> KEY_LATENCY_STATE_PRIMARY = Internal.createUniqueKey(LatencyState.LATENCY_STATE, "KEY_latency_state_PRIMARY", LatencyState.LATENCY_STATE.TIMESTAMP);
        public static final UniqueKey<MturkHitTypeIdsRecord> KEY_MTURK_HIT_TYPE_IDS_PRIMARY = Internal.createUniqueKey(MturkHitTypeIds.MTURK_HIT_TYPE_IDS, "KEY_mturk_hit_type_ids_PRIMARY", MturkHitTypeIds.MTURK_HIT_TYPE_IDS.ID);
        public static final UniqueKey<MturkHitTypeIdsRecord> KEY_MTURK_HIT_TYPE_IDS_ID = Internal.createUniqueKey(MturkHitTypeIds.MTURK_HIT_TYPE_IDS, "KEY_mturk_hit_type_ids_id", MturkHitTypeIds.MTURK_HIT_TYPE_IDS.ID);
        public static final UniqueKey<SentenceRecord> KEY_SENTENCE_PRIMARY = Internal.createUniqueKey(Sentence.SENTENCE, "KEY_sentence_PRIMARY", Sentence.SENTENCE.ID);
        public static final UniqueKey<SqlLockRecord> KEY_SQL_LOCK_PRIMARY = Internal.createUniqueKey(SqlLock.SQL_LOCK, "KEY_sql_lock_PRIMARY", SqlLock.SQL_LOCK.LOCK_NAME);
        public static final UniqueKey<TimingRecord> KEY_TIMING_PRIMARY = Internal.createUniqueKey(Timing.TIMING, "KEY_timing_PRIMARY", Timing.TIMING.ID);
        public static final UniqueKey<VariableRecord> KEY_VARIABLE_PRIMARY = Internal.createUniqueKey(Variable.VARIABLE, "KEY_variable_PRIMARY", Variable.VARIABLE.KEY);
        public static final UniqueKey<VariableRecord> KEY_VARIABLE_KEY = Internal.createUniqueKey(Variable.VARIABLE, "KEY_variable_key", Variable.VARIABLE.KEY);
    }
}
