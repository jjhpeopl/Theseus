/*
 * This file is generated by jOOQ.
*/
package ai.eloquent.sql.common.tables;


import ai.eloquent.sql.common.Common;
import ai.eloquent.sql.common.Indexes;
import ai.eloquent.sql.common.Keys;
import ai.eloquent.sql.common.tables.records.FsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fs extends TableImpl<FsRecord> {

    private static final long serialVersionUID = 1918118560;

    /**
     * The reference instance of <code>common.fs</code>
     */
    public static final Fs FS = new Fs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FsRecord> getRecordType() {
        return FsRecord.class;
    }

    /**
     * The column <code>common.fs.bucket</code>.
     */
    public final TableField<FsRecord, String> BUCKET = createField("bucket", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>common.fs.path</code>.
     */
    public final TableField<FsRecord, String> PATH = createField("path", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>common.fs.content_type</code>.
     */
    public final TableField<FsRecord, String> CONTENT_TYPE = createField("content_type", org.jooq.impl.SQLDataType.VARCHAR(127).nullable(false), this, "");

    /**
     * The column <code>common.fs.created_on</code>.
     */
    public final TableField<FsRecord, LocalDateTime> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>common.fs.updated_on</code>.
     */
    public final TableField<FsRecord, LocalDateTime> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>common.fs.metadata_json</code>.
     */
    public final TableField<FsRecord, String> METADATA_JSON = createField("metadata_json", org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false).defaultValue(org.jooq.impl.DSL.inline("{}", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>common.fs.contents</code>.
     */
    public final TableField<FsRecord, byte[]> CONTENTS = createField("contents", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * Create a <code>common.fs</code> table reference
     */
    public Fs() {
        this(DSL.name("fs"), null);
    }

    /**
     * Create an aliased <code>common.fs</code> table reference
     */
    public Fs(String alias) {
        this(DSL.name(alias), FS);
    }

    /**
     * Create an aliased <code>common.fs</code> table reference
     */
    public Fs(Name alias) {
        this(alias, FS);
    }

    private Fs(Name alias, Table<FsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fs(Name alias, Table<FsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Common.COMMON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FsRecord> getPrimaryKey() {
        return Keys.KEY_FS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FsRecord>> getKeys() {
        return Arrays.<UniqueKey<FsRecord>>asList(Keys.KEY_FS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Fs as(String alias) {
        return new Fs(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Fs as(Name alias) {
        return new Fs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fs rename(String name) {
        return new Fs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Fs rename(Name name) {
        return new Fs(name, null);
    }
}
