/*
 * This file is generated by jOOQ.
*/
package ai.eloquent.sql.common.tables;


import ai.eloquent.sql.common.Common;
import ai.eloquent.sql.common.Indexes;
import ai.eloquent.sql.common.Keys;
import ai.eloquent.sql.common.tables.records.VariableRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Variable extends TableImpl<VariableRecord> {

    private static final long serialVersionUID = -363708558;

    /**
     * The reference instance of <code>common.variable</code>
     */
    public static final Variable VARIABLE = new Variable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VariableRecord> getRecordType() {
        return VariableRecord.class;
    }

    /**
     * The column <code>common.variable.key</code>.
     */
    public final TableField<VariableRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>common.variable.value</code>.
     */
    public final TableField<VariableRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * Create a <code>common.variable</code> table reference
     */
    public Variable() {
        this(DSL.name("variable"), null);
    }

    /**
     * Create an aliased <code>common.variable</code> table reference
     */
    public Variable(String alias) {
        this(DSL.name(alias), VARIABLE);
    }

    /**
     * Create an aliased <code>common.variable</code> table reference
     */
    public Variable(Name alias) {
        this(alias, VARIABLE);
    }

    private Variable(Name alias, Table<VariableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Variable(Name alias, Table<VariableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Common.COMMON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VARIABLE_KEY, Indexes.VARIABLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VariableRecord> getPrimaryKey() {
        return Keys.KEY_VARIABLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VariableRecord>> getKeys() {
        return Arrays.<UniqueKey<VariableRecord>>asList(Keys.KEY_VARIABLE_PRIMARY, Keys.KEY_VARIABLE_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Variable as(String alias) {
        return new Variable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Variable as(Name alias) {
        return new Variable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Variable rename(String name) {
        return new Variable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Variable rename(Name name) {
        return new Variable(name, null);
    }
}
