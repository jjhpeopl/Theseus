/*
 * This file is generated by jOOQ.
*/
package ai.eloquent.sql.common.tables;


import ai.eloquent.sql.common.Common;
import ai.eloquent.sql.common.Indexes;
import ai.eloquent.sql.common.Keys;
import ai.eloquent.sql.common.tables.records.SentenceRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sentence extends TableImpl<SentenceRecord> {

    private static final long serialVersionUID = 801981933;

    /**
     * The reference instance of <code>common.sentence</code>
     */
    public static final Sentence SENTENCE = new Sentence();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SentenceRecord> getRecordType() {
        return SentenceRecord.class;
    }

    /**
     * The column <code>common.sentence.id</code>.
     */
    public final TableField<SentenceRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>common.sentence.conversation_id</code>.
     */
    public final TableField<SentenceRecord, Long> CONVERSATION_ID = createField("conversation_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>common.sentence.conversation_index</code>.
     */
    public final TableField<SentenceRecord, Integer> CONVERSATION_INDEX = createField("conversation_index", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>common.sentence.spec_id</code>.
     */
    public final TableField<SentenceRecord, String> SPEC_ID = createField("spec_id", org.jooq.impl.SQLDataType.VARCHAR(127).nullable(false), this, "");

    /**
     * The column <code>common.sentence.spec_version</code>.
     */
    public final TableField<SentenceRecord, Long> SPEC_VERSION = createField("spec_version", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>common.sentence.spec_frame</code>.
     */
    public final TableField<SentenceRecord, String> SPEC_FRAME = createField("spec_frame", org.jooq.impl.SQLDataType.VARCHAR(63).nullable(false), this, "");

    /**
     * The column <code>common.sentence.date_added</code>.
     */
    public final TableField<SentenceRecord, LocalDateTime> DATE_ADDED = createField("date_added", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>common.sentence.host_added</code>.
     */
    public final TableField<SentenceRecord, String> HOST_ADDED = createField("host_added", org.jooq.impl.SQLDataType.VARCHAR(127).nullable(false), this, "");

    /**
     * The column <code>common.sentence.cost_dollars</code>.
     */
    public final TableField<SentenceRecord, Double> COST_DOLLARS = createField("cost_dollars", org.jooq.impl.SQLDataType.DOUBLE.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>common.sentence.text</code>.
     */
    public final TableField<SentenceRecord, String> TEXT = createField("text", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>common.sentence.proto</code>.
     */
    public final TableField<SentenceRecord, byte[]> PROTO = createField("proto", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>common.sentence.has_sequence_annotation</code>.
     */
    public final TableField<SentenceRecord, Boolean> HAS_SEQUENCE_ANNOTATION = createField("has_sequence_annotation", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>common.sentence.has_intent_annotation</code>.
     */
    public final TableField<SentenceRecord, Boolean> HAS_INTENT_ANNOTATION = createField("has_intent_annotation", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>common.sentence.has_faq_annotation</code>.
     */
    public final TableField<SentenceRecord, Boolean> HAS_FAQ_ANNOTATION = createField("has_faq_annotation", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>common.sentence.has_property_status_annotation</code>.
     */
    public final TableField<SentenceRecord, Boolean> HAS_PROPERTY_STATUS_ANNOTATION = createField("has_property_status_annotation", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>common.sentence.has_smalltalk_annotation</code>.
     */
    public final TableField<SentenceRecord, Boolean> HAS_SMALLTALK_ANNOTATION = createField("has_smalltalk_annotation", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>common.sentence</code> table reference
     */
    public Sentence() {
        this(DSL.name("sentence"), null);
    }

    /**
     * Create an aliased <code>common.sentence</code> table reference
     */
    public Sentence(String alias) {
        this(DSL.name(alias), SENTENCE);
    }

    /**
     * Create an aliased <code>common.sentence</code> table reference
     */
    public Sentence(Name alias) {
        this(alias, SENTENCE);
    }

    private Sentence(Name alias, Table<SentenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sentence(Name alias, Table<SentenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Common.COMMON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SENTENCE_PRIMARY, Indexes.SENTENCE_SENTENCE__CONVERSATION_ID_INDEX, Indexes.SENTENCE_SENTENCE__DATE_ADDED);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SentenceRecord, Long> getIdentity() {
        return Keys.IDENTITY_SENTENCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SentenceRecord> getPrimaryKey() {
        return Keys.KEY_SENTENCE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SentenceRecord>> getKeys() {
        return Arrays.<UniqueKey<SentenceRecord>>asList(Keys.KEY_SENTENCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sentence as(String alias) {
        return new Sentence(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sentence as(Name alias) {
        return new Sentence(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sentence rename(String name) {
        return new Sentence(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sentence rename(Name name) {
        return new Sentence(name, null);
    }
}
