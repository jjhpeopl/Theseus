/*
 * This file is generated by jOOQ.
*/
package ai.eloquent.sql.common.tables;


import ai.eloquent.sql.common.Common;
import ai.eloquent.sql.common.Indexes;
import ai.eloquent.sql.common.Keys;
import ai.eloquent.sql.common.tables.records.CacheTestDummyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CacheTestDummy extends TableImpl<CacheTestDummyRecord> {

    private static final long serialVersionUID = -295618790;

    /**
     * The reference instance of <code>common.cache_test_dummy</code>
     */
    public static final CacheTestDummy CACHE_TEST_DUMMY = new CacheTestDummy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CacheTestDummyRecord> getRecordType() {
        return CacheTestDummyRecord.class;
    }

    /**
     * The column <code>common.cache_test_dummy.id</code>.
     */
    public final TableField<CacheTestDummyRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(127).nullable(false), this, "");

    /**
     * The column <code>common.cache_test_dummy.value</code>.
     */
    public final TableField<CacheTestDummyRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR(127), this, "");

    /**
     * Create a <code>common.cache_test_dummy</code> table reference
     */
    public CacheTestDummy() {
        this(DSL.name("cache_test_dummy"), null);
    }

    /**
     * Create an aliased <code>common.cache_test_dummy</code> table reference
     */
    public CacheTestDummy(String alias) {
        this(DSL.name(alias), CACHE_TEST_DUMMY);
    }

    /**
     * Create an aliased <code>common.cache_test_dummy</code> table reference
     */
    public CacheTestDummy(Name alias) {
        this(alias, CACHE_TEST_DUMMY);
    }

    private CacheTestDummy(Name alias, Table<CacheTestDummyRecord> aliased) {
        this(alias, aliased, null);
    }

    private CacheTestDummy(Name alias, Table<CacheTestDummyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Common.COMMON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CACHE_TEST_DUMMY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CacheTestDummyRecord> getPrimaryKey() {
        return Keys.KEY_CACHE_TEST_DUMMY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CacheTestDummyRecord>> getKeys() {
        return Arrays.<UniqueKey<CacheTestDummyRecord>>asList(Keys.KEY_CACHE_TEST_DUMMY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CacheTestDummy as(String alias) {
        return new CacheTestDummy(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CacheTestDummy as(Name alias) {
        return new CacheTestDummy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CacheTestDummy rename(String name) {
        return new CacheTestDummy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CacheTestDummy rename(Name name) {
        return new CacheTestDummy(name, null);
    }
}
