syntax = "proto3";
package ai.eloquent;

option java_package = "ai.eloquent.data";
option java_outer_classname = "UDPBroadcastProtos";


enum MessageType {
  /** A raft message */
  RAFT      = 0;
  /** A cache invalidation message for {@link EloquentCache}. This is distinct from {@link FRONTEND_REFRESH}, which refreshes a frontend's cache. */
  CACHE     = 1;
  /** A routine ping */
  PING      = 2;
  /** An indication that we should re-index a given document. */
  REINDEX   = 3;
  /** Refresh a cache entry on the frontend. This is distinct from {@link CACHE}, which invalidates an {@link EloquentCache} */
  FRONTEND_REFRESH     = 4;
}


/**
 * A message indicating the cache and key that we should clear.
 */
message CacheInvalidateMessage {
  /** The name of the cache we're invalidating a key in. */
  string name       = 1;
  /** The key we're invalidating. */
  bytes  key        = 2;
  /** If true, we're invalidating the entire cache. */
  bool   clear_all  = 3;
}


/**
 * A message indicating that we should re-index a document everywhere on
 * the cluster.
 */
message ReindexDocument {
  /** The UUID of the document we are reindexing. */
  string uuid       = 1;
}


/**
 * A message indicating a frontend cache should be refreshed with a new value.
 */
message FrontendRefreshMessage {
  /** The username that owns this cache element. */
  string username    = 1;
  /** The name of the cache we're invalidating a key in. */
  string name        = 2;
  /** The key we're invalidating. */
  string  key        = 3;
  /** The JSON of the value we're invalidating. */
  string  value_json = 4;
}


/**
 * A message we'd be sending over UDP, along with metadata
 */
message UDPPacket {
  /** The actual contents of the message. */
  bytes contents               = 1;
  /** A flag to type. */
  MessageType type             = 2;
  /** The server that sent this message. */
  string sender                = 3;
  /** If true, this packet is a broadcast packet. */
  bool   is_broadcast          = 4;
}
